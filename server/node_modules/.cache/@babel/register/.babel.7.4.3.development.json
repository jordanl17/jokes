{
  "{\"sourceRoot\":\"/Users/Jordan/Desktop/jokes/server/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Jordan/Desktop/jokes/server\",\"filename\":\"/Users/Jordan/Desktop/jokes/server/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Jordan/Desktop/jokes/server\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Jordan/Desktop/jokes/server",
      "filename": "/Users/Jordan/Desktop/jokes/server/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Jordan/Desktop/jokes/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Jordan/Desktop/jokes/server/src/index.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/Jordan/Desktop/jokes/server/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _server = _interopRequireDefault(require(\"./server\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n_server[\"default\"].start();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInNlcnZlciIsInN0YXJ0Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBRUFBLG1CQUFPQyxLQUFQIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9Kb3JkYW4vRGVza3RvcC9qb2tlcy9zZXJ2ZXIvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNlcnZlciBmcm9tIFwiLi9zZXJ2ZXJcIjtcblxuc2VydmVyLnN0YXJ0KCk7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "server",
        "start"
      ],
      "mappings": ";;AAAA;;;;AAEAA,mBAAOC,KAAP",
      "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src",
      "sourcesContent": [
        "import server from \"./server\";\n\nserver.start();\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1555086907000
  },
  "{\"sourceRoot\":\"/Users/Jordan/Desktop/jokes/server/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Jordan/Desktop/jokes/server\",\"filename\":\"/Users/Jordan/Desktop/jokes/server/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Jordan/Desktop/jokes/server\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Jordan/Desktop/jokes/server",
      "filename": "/Users/Jordan/Desktop/jokes/server/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Jordan/Desktop/jokes/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Jordan/Desktop/jokes/server/src/server.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/Jordan/Desktop/jokes/server/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _cors = _interopRequireDefault(require(\"cors\"));\n\nvar _randomJokeController = _interopRequireDefault(require(\"./controllers/randomJokeController\"));\n\nvar _jokeController = _interopRequireDefault(require(\"./controllers/jokeController\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar start = function start() {\n  var app = (0, _express[\"default\"])();\n  app.use(_bodyParser[\"default\"].json());\n  app.use((0, _cors[\"default\"])());\n  app.get(\"/randomJoke\", (0, _cors[\"default\"])(), _randomJokeController[\"default\"]);\n  /******* jokes */\n  // all jokes\n\n  app.get(\"/jokes\", _jokeController[\"default\"].all); // new joke\n\n  app.post(\"/joke\", _jokeController[\"default\"].add); // joke by id\n\n  app.get(\"/joke\", _jokeController[\"default\"].get); // delete by id\n\n  app[\"delete\"](\"/joke\", _jokeController[\"default\"].remove); // update by id\n\n  app.patch(\"/joke\", _jokeController[\"default\"].update);\n  /****** filters */\n\n  app.listen(3050, function () {\n    console.log(\"Example app listening on port 3050.\");\n  });\n};\n\nvar _default = {\n  start: start\n};\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJzdGFydCIsImFwcCIsInVzZSIsImJvZHlQYXJzZXIiLCJqc29uIiwiZ2V0IiwicmFuZG9tSm9rZUNvbnRyb2xsZXIiLCJqb2tlQ29udHJvbGxlciIsImFsbCIsInBvc3QiLCJhZGQiLCJyZW1vdmUiLCJwYXRjaCIsInVwZGF0ZSIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQUNBLElBQU1BLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQU07QUFDbEIsTUFBTUMsR0FBRyxHQUFHLDBCQUFaO0FBQ0FBLEVBQUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRQyx1QkFBV0MsSUFBWCxFQUFSO0FBQ0FILEVBQUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLHVCQUFSO0FBRUFELEVBQUFBLEdBQUcsQ0FBQ0ksR0FBSixDQUFRLGFBQVIsRUFBdUIsdUJBQXZCLEVBQStCQyxnQ0FBL0I7QUFFQTtBQUNBOztBQUNBTCxFQUFBQSxHQUFHLENBQUNJLEdBQUosQ0FBUSxRQUFSLEVBQWtCRSwyQkFBZUMsR0FBakMsRUFUa0IsQ0FVbEI7O0FBQ0FQLEVBQUFBLEdBQUcsQ0FBQ1EsSUFBSixDQUFTLE9BQVQsRUFBa0JGLDJCQUFlRyxHQUFqQyxFQVhrQixDQVlsQjs7QUFDQVQsRUFBQUEsR0FBRyxDQUFDSSxHQUFKLENBQVEsT0FBUixFQUFpQkUsMkJBQWVGLEdBQWhDLEVBYmtCLENBY2xCOztBQUNBSixFQUFBQSxHQUFHLFVBQUgsQ0FBVyxPQUFYLEVBQW9CTSwyQkFBZUksTUFBbkMsRUFma0IsQ0FnQmxCOztBQUNBVixFQUFBQSxHQUFHLENBQUNXLEtBQUosQ0FBVSxPQUFWLEVBQW1CTCwyQkFBZU0sTUFBbEM7QUFFQTs7QUFFQVosRUFBQUEsR0FBRyxDQUFDYSxNQUFKLENBQVcsSUFBWCxFQUFpQixZQUFXO0FBQzFCQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxxQ0FBWjtBQUNELEdBRkQ7QUFHRCxDQXhCRDs7ZUEwQmU7QUFBRWhCLEVBQUFBLEtBQUssRUFBTEE7QUFBRixDIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9Kb3JkYW4vRGVza3RvcC9qb2tlcy9zZXJ2ZXIvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gXCJib2R5LXBhcnNlclwiO1xuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcblxuaW1wb3J0IHJhbmRvbUpva2VDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXJzL3JhbmRvbUpva2VDb250cm9sbGVyXCI7XG5pbXBvcnQgam9rZUNvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlcnMvam9rZUNvbnRyb2xsZXJcIjtcbmNvbnN0IHN0YXJ0ID0gKCkgPT4ge1xuICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuICBhcHAudXNlKGNvcnMoKSk7XG5cbiAgYXBwLmdldChcIi9yYW5kb21Kb2tlXCIsIGNvcnMoKSwgcmFuZG9tSm9rZUNvbnRyb2xsZXIpO1xuXG4gIC8qKioqKioqIGpva2VzICovXG4gIC8vIGFsbCBqb2tlc1xuICBhcHAuZ2V0KFwiL2pva2VzXCIsIGpva2VDb250cm9sbGVyLmFsbCk7XG4gIC8vIG5ldyBqb2tlXG4gIGFwcC5wb3N0KFwiL2pva2VcIiwgam9rZUNvbnRyb2xsZXIuYWRkKTtcbiAgLy8gam9rZSBieSBpZFxuICBhcHAuZ2V0KFwiL2pva2VcIiwgam9rZUNvbnRyb2xsZXIuZ2V0KTtcbiAgLy8gZGVsZXRlIGJ5IGlkXG4gIGFwcC5kZWxldGUoXCIvam9rZVwiLCBqb2tlQ29udHJvbGxlci5yZW1vdmUpO1xuICAvLyB1cGRhdGUgYnkgaWRcbiAgYXBwLnBhdGNoKFwiL2pva2VcIiwgam9rZUNvbnRyb2xsZXIudXBkYXRlKTtcblxuICAvKioqKioqIGZpbHRlcnMgKi9cblxuICBhcHAubGlzdGVuKDMwNTAsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKFwiRXhhbXBsZSBhcHAgbGlzdGVuaW5nIG9uIHBvcnQgMzA1MC5cIik7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeyBzdGFydCB9O1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "start",
        "app",
        "use",
        "bodyParser",
        "json",
        "get",
        "randomJokeController",
        "jokeController",
        "all",
        "post",
        "add",
        "remove",
        "patch",
        "update",
        "listen",
        "console",
        "log"
      ],
      "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;AACA,IAAMA,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,MAAMC,GAAG,GAAG,0BAAZ;AACAA,EAAAA,GAAG,CAACC,GAAJ,CAAQC,uBAAWC,IAAX,EAAR;AACAH,EAAAA,GAAG,CAACC,GAAJ,CAAQ,uBAAR;AAEAD,EAAAA,GAAG,CAACI,GAAJ,CAAQ,aAAR,EAAuB,uBAAvB,EAA+BC,gCAA/B;AAEA;AACA;;AACAL,EAAAA,GAAG,CAACI,GAAJ,CAAQ,QAAR,EAAkBE,2BAAeC,GAAjC,EATkB,CAUlB;;AACAP,EAAAA,GAAG,CAACQ,IAAJ,CAAS,OAAT,EAAkBF,2BAAeG,GAAjC,EAXkB,CAYlB;;AACAT,EAAAA,GAAG,CAACI,GAAJ,CAAQ,OAAR,EAAiBE,2BAAeF,GAAhC,EAbkB,CAclB;;AACAJ,EAAAA,GAAG,UAAH,CAAW,OAAX,EAAoBM,2BAAeI,MAAnC,EAfkB,CAgBlB;;AACAV,EAAAA,GAAG,CAACW,KAAJ,CAAU,OAAV,EAAmBL,2BAAeM,MAAlC;AAEA;;AAEAZ,EAAAA,GAAG,CAACa,MAAJ,CAAW,IAAX,EAAiB,YAAW;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD,GAFD;AAGD,CAxBD;;eA0Be;AAAEhB,EAAAA,KAAK,EAALA;AAAF,C",
      "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src",
      "sourcesContent": [
        "import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\n\nimport randomJokeController from \"./controllers/randomJokeController\";\nimport jokeController from \"./controllers/jokeController\";\nconst start = () => {\n  const app = express();\n  app.use(bodyParser.json());\n  app.use(cors());\n\n  app.get(\"/randomJoke\", cors(), randomJokeController);\n\n  /******* jokes */\n  // all jokes\n  app.get(\"/jokes\", jokeController.all);\n  // new joke\n  app.post(\"/joke\", jokeController.add);\n  // joke by id\n  app.get(\"/joke\", jokeController.get);\n  // delete by id\n  app.delete(\"/joke\", jokeController.remove);\n  // update by id\n  app.patch(\"/joke\", jokeController.update);\n\n  /****** filters */\n\n  app.listen(3050, function() {\n    console.log(\"Example app listening on port 3050.\");\n  });\n};\n\nexport default { start };\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1555187697000
  },
  "{\"sourceRoot\":\"/Users/Jordan/Desktop/jokes/server/src/controllers\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Jordan/Desktop/jokes/server\",\"filename\":\"/Users/Jordan/Desktop/jokes/server/src/controllers/randomJokeController.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Jordan/Desktop/jokes/server\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src/controllers",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Jordan/Desktop/jokes/server",
      "filename": "/Users/Jordan/Desktop/jokes/server/src/controllers/randomJokeController.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Jordan/Desktop/jokes/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Jordan/Desktop/jokes/server/src/controllers/randomJokeController.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/Jordan/Desktop/jokes/server/src/controllers/randomJokeController.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src/controllers",
        "sourceFileName": "randomJokeController.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _fileService = _interopRequireDefault(require(\"../services/fileService\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar randomJoke = function randomJoke(req, res) {\n  console.log(\"random\");\n\n  _fileService[\"default\"].allJokes().then(function (jokes) {\n    var randomIndex = Math.floor(Math.random() * jokes.length);\n    res.status(200);\n    res.send(jokes[randomIndex]);\n  })[\"catch\"](function (err) {\n    res.status(400);\n    res.send(err);\n  });\n};\n\nvar _default = randomJoke;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJhbmRvbUpva2VDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbInJhbmRvbUpva2UiLCJyZXEiLCJyZXMiLCJjb25zb2xlIiwibG9nIiwiZmlsZVNlcnZpY2UiLCJhbGxKb2tlcyIsInRoZW4iLCJqb2tlcyIsInJhbmRvbUluZGV4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwic3RhdHVzIiwic2VuZCIsImVyciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBRUEsSUFBTUEsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDL0JDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFFBQVo7O0FBQ0FDLDBCQUNHQyxRQURILEdBRUdDLElBRkgsQ0FFUSxVQUFBQyxLQUFLLEVBQUk7QUFDYixRQUFNQyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JKLEtBQUssQ0FBQ0ssTUFBakMsQ0FBcEI7QUFDQVgsSUFBQUEsR0FBRyxDQUFDWSxNQUFKLENBQVcsR0FBWDtBQUNBWixJQUFBQSxHQUFHLENBQUNhLElBQUosQ0FBU1AsS0FBSyxDQUFDQyxXQUFELENBQWQ7QUFDRCxHQU5ILFdBT1MsVUFBQU8sR0FBRyxFQUFJO0FBQ1pkLElBQUFBLEdBQUcsQ0FBQ1ksTUFBSixDQUFXLEdBQVg7QUFDQVosSUFBQUEsR0FBRyxDQUFDYSxJQUFKLENBQVNDLEdBQVQ7QUFDRCxHQVZIO0FBV0QsQ0FiRDs7ZUFlZWhCLFUiLCJzb3VyY2VSb290IjoiL1VzZXJzL0pvcmRhbi9EZXNrdG9wL2pva2VzL3NlcnZlci9zcmMvY29udHJvbGxlcnMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmlsZVNlcnZpY2UgZnJvbSBcIi4uL3NlcnZpY2VzL2ZpbGVTZXJ2aWNlXCI7XG5cbmNvbnN0IHJhbmRvbUpva2UgPSAocmVxLCByZXMpID0+IHtcbiAgY29uc29sZS5sb2coXCJyYW5kb21cIik7XG4gIGZpbGVTZXJ2aWNlXG4gICAgLmFsbEpva2VzKClcbiAgICAudGhlbihqb2tlcyA9PiB7XG4gICAgICBjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGpva2VzLmxlbmd0aCk7XG4gICAgICByZXMuc3RhdHVzKDIwMCk7XG4gICAgICByZXMuc2VuZChqb2tlc1tyYW5kb21JbmRleF0pO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICByZXMuc3RhdHVzKDQwMCk7XG4gICAgICByZXMuc2VuZChlcnIpO1xuICAgIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmFuZG9tSm9rZTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "randomJokeController.js"
      ],
      "names": [
        "randomJoke",
        "req",
        "res",
        "console",
        "log",
        "fileService",
        "allJokes",
        "then",
        "jokes",
        "randomIndex",
        "Math",
        "floor",
        "random",
        "length",
        "status",
        "send",
        "err"
      ],
      "mappings": ";;;;;;;AAAA;;;;AAEA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACAC,0BACGC,QADH,GAEGC,IAFH,CAEQ,UAAAC,KAAK,EAAI;AACb,QAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,KAAK,CAACK,MAAjC,CAApB;AACAX,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX;AACAZ,IAAAA,GAAG,CAACa,IAAJ,CAASP,KAAK,CAACC,WAAD,CAAd;AACD,GANH,WAOS,UAAAO,GAAG,EAAI;AACZd,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX;AACAZ,IAAAA,GAAG,CAACa,IAAJ,CAASC,GAAT;AACD,GAVH;AAWD,CAbD;;eAeehB,U",
      "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src/controllers",
      "sourcesContent": [
        "import fileService from \"../services/fileService\";\n\nconst randomJoke = (req, res) => {\n  console.log(\"random\");\n  fileService\n    .allJokes()\n    .then(jokes => {\n      const randomIndex = Math.floor(Math.random() * jokes.length);\n      res.status(200);\n      res.send(jokes[randomIndex]);\n    })\n    .catch(err => {\n      res.status(400);\n      res.send(err);\n    });\n};\n\nexport default randomJoke;\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1555184406000
  },
  "{\"sourceRoot\":\"/Users/Jordan/Desktop/jokes/server/src/services\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Jordan/Desktop/jokes/server\",\"filename\":\"/Users/Jordan/Desktop/jokes/server/src/services/fileService.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Jordan/Desktop/jokes/server\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src/services",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Jordan/Desktop/jokes/server",
      "filename": "/Users/Jordan/Desktop/jokes/server/src/services/fileService.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Jordan/Desktop/jokes/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Jordan/Desktop/jokes/server/src/services/fileService.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/Jordan/Desktop/jokes/server/src/services/fileService.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src/services",
        "sourceFileName": "fileService.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar readFile = function readFile() {\n  return new Promise(function (resolve, reject) {\n    var data = \"\";\n\n    var readStream = _fs[\"default\"].createReadStream(\"jokes.csv\", \"utf8\");\n\n    console.log(\"read file\");\n    readStream.on(\"data\", function (chunk) {\n      return data += chunk;\n    });\n    readStream.on(\"end\", function () {\n      return resolve(csvToJson(data));\n    });\n    readStream.on(\"error\", function (err) {\n      return reject(err);\n    });\n  });\n};\n\nvar csvToJson = function csvToJson(csvContent) {\n  return csvContent.split(\"\\n\");\n};\n\nvar updateFile = function updateFile(newContent) {\n  return new Promise(function (resolve, reject) {\n    return _fs[\"default\"].writeFile(\"jokes.csv\", newContent.join(\"\\n\"), function (err) {\n      if (err) {\n        reject(err);\n      }\n\n      resolve();\n    });\n  });\n};\n\nvar addJoke = function addJoke(newJoke) {\n  return new Promise(function (resolve, reject) {\n    readFile().then(function (jokes) {\n      jokes.push(newJoke);\n      updateFile(jokes).then(function () {\n        return resolve();\n      })[\"catch\"](function (err) {\n        return reject(err);\n      });\n    });\n  });\n};\n\nvar getById = function getById(id) {\n  return new Promise(function (resolve) {\n    readFile().then(function (jokes) {\n      var requestedJoke = jokes[id];\n      resolve(requestedJoke);\n    });\n  });\n};\n\nvar deleteById = function deleteById(id) {\n  return new Promise(function (resolve) {\n    readFile().then(function (jokes) {\n      // index is int, id is string, do not type ascert\n      var newJokes = jokes.filter(function (joke, index) {\n        return index != id;\n      });\n      updateFile(newJokes).then(function () {\n        return resolve();\n      })[\"catch\"](function (err) {\n        return reject(err);\n      });\n    });\n  });\n};\n\nvar updateById = function updateById(_ref) {\n  var id = _ref.id,\n      joke = _ref.joke;\n  return new Promise(function (resolve) {\n    readFile().then(function (jokes) {\n      var newJokes = jokes.map(function (originalJoke, index) {\n        return index == id ? joke : originalJoke;\n      });\n      updateFile(newJokes).then(function () {\n        return resolve();\n      })[\"catch\"](function (err) {\n        return reject(err);\n      });\n    });\n  });\n};\n\nvar _default = {\n  allJokes: function allJokes() {\n    return readFile();\n  },\n  addJoke: addJoke,\n  getById: getById,\n  deleteById: deleteById,\n  updateById: updateById\n};\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGVTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbInJlYWRGaWxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkYXRhIiwicmVhZFN0cmVhbSIsImZzIiwiY3JlYXRlUmVhZFN0cmVhbSIsImNvbnNvbGUiLCJsb2ciLCJvbiIsImNodW5rIiwiY3N2VG9Kc29uIiwiZXJyIiwiY3N2Q29udGVudCIsInNwbGl0IiwidXBkYXRlRmlsZSIsIm5ld0NvbnRlbnQiLCJ3cml0ZUZpbGUiLCJqb2luIiwiYWRkSm9rZSIsIm5ld0pva2UiLCJ0aGVuIiwiam9rZXMiLCJwdXNoIiwiZ2V0QnlJZCIsImlkIiwicmVxdWVzdGVkSm9rZSIsImRlbGV0ZUJ5SWQiLCJuZXdKb2tlcyIsImZpbHRlciIsImpva2UiLCJpbmRleCIsInVwZGF0ZUJ5SWQiLCJtYXAiLCJvcmlnaW5hbEpva2UiLCJhbGxKb2tlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBRUEsSUFBTUEsUUFBUSxHQUFHLFNBQVhBLFFBQVc7QUFBQSxTQUNmLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDL0IsUUFBSUMsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsUUFBSUMsVUFBVSxHQUFHQyxlQUFHQyxnQkFBSCxDQUFvQixXQUFwQixFQUFpQyxNQUFqQyxDQUFqQjs7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksV0FBWjtBQUNBSixJQUFBQSxVQUFVLENBQUNLLEVBQVgsQ0FBYyxNQUFkLEVBQXNCLFVBQUFDLEtBQUs7QUFBQSxhQUFLUCxJQUFJLElBQUlPLEtBQWI7QUFBQSxLQUEzQjtBQUNBTixJQUFBQSxVQUFVLENBQUNLLEVBQVgsQ0FBYyxLQUFkLEVBQXFCO0FBQUEsYUFBTVIsT0FBTyxDQUFDVSxTQUFTLENBQUNSLElBQUQsQ0FBVixDQUFiO0FBQUEsS0FBckI7QUFDQUMsSUFBQUEsVUFBVSxDQUFDSyxFQUFYLENBQWMsT0FBZCxFQUF1QixV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ZUFDekJBLEtBQUssSUFBSU4sRUFBVCxHQUFjSyxJQUFkLEdBQXFCSSxZQURJO0FBQUEsT0FBVixDQUFqQjtBQUlBbkIsTUFBQUEsVUFBVSxDQUFDYSxRQUFELENBQVYsQ0FDR1AsSUFESCxDQUNRO0FBQUEsZUFBTXBCLE9BQU8sRUFBYjtBQUFBLE9BRFIsV0FFUyxVQUFBVyxHQUFHO0FBQUEsZUFBSVYsTUFBTSxDQUFDVSxHQUFELENBQVY7QUFBQSxPQUZaO0FBR0QsS0FSRDtBQVNELEdBVkQsQ0FEaUI7QUFBQSxDQUFuQjs7ZUFZZTtBQUNidUIsRUFBQUEsUUFBUSxFQUFFO0FBQUEsV0FBTXBDLFFBQVEsRUFBZDtBQUFBLEdBREc7QUFFYm9CLEVBQUFBLE9BQU8sRUFBUEEsT0FGYTtBQUdiSyxFQUFBQSxPQUFPLEVBQVBBLE9BSGE7QUFJYkcsRUFBQUEsVUFBVSxFQUFWQSxVQUphO0FBS2JLLEVBQUFBLFVBQVUsRUFBVkE7QUFMYSxDIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9Kb3JkYW4vRGVza3RvcC9qb2tlcy9zZXJ2ZXIvc3JjL3NlcnZpY2VzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuXG5jb25zdCByZWFkRmlsZSA9ICgpID0+XG4gIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZGF0YSA9IFwiXCI7XG4gICAgdmFyIHJlYWRTdHJlYW0gPSBmcy5jcmVhdGVSZWFkU3RyZWFtKFwiam9rZXMuY3N2XCIsIFwidXRmOFwiKTtcbiAgICBjb25zb2xlLmxvZyhcInJlYWQgZmlsZVwiKTtcbiAgICByZWFkU3RyZWFtLm9uKFwiZGF0YVwiLCBjaHVuayA9PiAoZGF0YSArPSBjaHVuaykpO1xuICAgIHJlYWRTdHJlYW0ub24oXCJlbmRcIiwgKCkgPT4gcmVzb2x2ZShjc3ZUb0pzb24oZGF0YSkpKTtcbiAgICByZWFkU3RyZWFtLm9uKFwiZXJyb3JcIiwgZXJyID0+IHJlamVjdChlcnIpKTtcbiAgfSk7XG5cbmNvbnN0IGNzdlRvSnNvbiA9IGNzdkNvbnRlbnQgPT4gY3N2Q29udGVudC5zcGxpdChcIlxcblwiKTtcblxuY29uc3QgdXBkYXRlRmlsZSA9IG5ld0NvbnRlbnQgPT5cbiAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICBmcy53cml0ZUZpbGUoXCJqb2tlcy5jc3ZcIiwgbmV3Q29udGVudC5qb2luKFwiXFxuXCIpLCBlcnIgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KVxuICApO1xuXG5jb25zdCBhZGRKb2tlID0gbmV3Sm9rZSA9PlxuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVhZEZpbGUoKS50aGVuKGpva2VzID0+IHtcbiAgICAgIGpva2VzLnB1c2gobmV3Sm9rZSk7XG5cbiAgICAgIHVwZGF0ZUZpbGUoam9rZXMpXG4gICAgICAgIC50aGVuKCgpID0+IHJlc29sdmUoKSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XG4gICAgfSk7XG4gIH0pO1xuXG5jb25zdCBnZXRCeUlkID0gaWQgPT5cbiAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgcmVhZEZpbGUoKS50aGVuKGpva2VzID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3RlZEpva2UgPSBqb2tlc1tpZF07XG4gICAgICByZXNvbHZlKHJlcXVlc3RlZEpva2UpO1xuICAgIH0pO1xuICB9KTtcblxuY29uc3QgZGVsZXRlQnlJZCA9IGlkID0+XG4gIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHJlYWRGaWxlKCkudGhlbihqb2tlcyA9PiB7XG4gICAgICAvLyBpbmRleCBpcyBpbnQsIGlkIGlzIHN0cmluZywgZG8gbm90IHR5cGUgYXNjZXJ0XG4gICAgICBjb25zdCBuZXdKb2tlcyA9IGpva2VzLmZpbHRlcigoam9rZSwgaW5kZXgpID0+IGluZGV4ICE9IGlkKTtcblxuICAgICAgdXBkYXRlRmlsZShuZXdKb2tlcylcbiAgICAgICAgLnRoZW4oKCkgPT4gcmVzb2x2ZSgpKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICB9KTtcbiAgfSk7XG5cbmNvbnN0IHVwZGF0ZUJ5SWQgPSAoeyBpZCwgam9rZSB9KSA9PlxuICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICByZWFkRmlsZSgpLnRoZW4oam9rZXMgPT4ge1xuICAgICAgY29uc3QgbmV3Sm9rZXMgPSBqb2tlcy5tYXAoKG9yaWdpbmFsSm9rZSwgaW5kZXgpID0+XG4gICAgICAgIGluZGV4ID09IGlkID8gam9rZSA6IG9yaWdpbmFsSm9rZVxuICAgICAgKTtcblxuICAgICAgdXBkYXRlRmlsZShuZXdKb2tlcylcbiAgICAgICAgLnRoZW4oKCkgPT4gcmVzb2x2ZSgpKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICB9KTtcbiAgfSk7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGFsbEpva2VzOiAoKSA9PiByZWFkRmlsZSgpLFxuICBhZGRKb2tlLFxuICBnZXRCeUlkLFxuICBkZWxldGVCeUlkLFxuICB1cGRhdGVCeUlkXG59O1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "fileService.js"
      ],
      "names": [
        "readFile",
        "Promise",
        "resolve",
        "reject",
        "data",
        "readStream",
        "fs",
        "createReadStream",
        "console",
        "log",
        "on",
        "chunk",
        "csvToJson",
        "err",
        "csvContent",
        "split",
        "updateFile",
        "newContent",
        "writeFile",
        "join",
        "addJoke",
        "newJoke",
        "then",
        "jokes",
        "push",
        "getById",
        "id",
        "requestedJoke",
        "deleteById",
        "newJokes",
        "filter",
        "joke",
        "index",
        "updateById",
        "map",
        "originalJoke",
        "allJokes"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src/services",
      "sourcesContent": [
        "import fs from \"fs\";\n\nconst readFile = () =>\n  new Promise((resolve, reject) => {\n    var data = \"\";\n    var readStream = fs.createReadStream(\"jokes.csv\", \"utf8\");\n    console.log(\"read file\");\n    readStream.on(\"data\", chunk => (data += chunk));\n    readStream.on(\"end\", () => resolve(csvToJson(data)));\n    readStream.on(\"error\", err => reject(err));\n  });\n\nconst csvToJson = csvContent => csvContent.split(\"\\n\");\n\nconst updateFile = newContent =>\n  new Promise((resolve, reject) =>\n    fs.writeFile(\"jokes.csv\", newContent.join(\"\\n\"), err => {\n      if (err) {\n        reject(err);\n      }\n      resolve();\n    })\n  );\n\nconst addJoke = newJoke =>\n  new Promise((resolve, reject) => {\n    readFile().then(jokes => {\n      jokes.push(newJoke);\n\n      updateFile(jokes)\n        .then(() => resolve())\n        .catch(err => reject(err));\n    });\n  });\n\nconst getById = id =>\n  new Promise(resolve => {\n    readFile().then(jokes => {\n      const requestedJoke = jokes[id];\n      resolve(requestedJoke);\n    });\n  });\n\nconst deleteById = id =>\n  new Promise(resolve => {\n    readFile().then(jokes => {\n      // index is int, id is string, do not type ascert\n      const newJokes = jokes.filter((joke, index) => index != id);\n\n      updateFile(newJokes)\n        .then(() => resolve())\n        .catch(err => reject(err));\n    });\n  });\n\nconst updateById = ({ id, joke }) =>\n  new Promise(resolve => {\n    readFile().then(jokes => {\n      const newJokes = jokes.map((originalJoke, index) =>\n        index == id ? joke : originalJoke\n      );\n\n      updateFile(newJokes)\n        .then(() => resolve())\n        .catch(err => reject(err));\n    });\n  });\nexport default {\n  allJokes: () => readFile(),\n  addJoke,\n  getById,\n  deleteById,\n  updateById\n};\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1555184347000
  },
  "{\"sourceRoot\":\"/Users/Jordan/Desktop/jokes/server/src/controllers\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Jordan/Desktop/jokes/server\",\"filename\":\"/Users/Jordan/Desktop/jokes/server/src/controllers/jokeController.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Jordan/Desktop/jokes/server\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src/controllers",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Jordan/Desktop/jokes/server",
      "filename": "/Users/Jordan/Desktop/jokes/server/src/controllers/jokeController.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Jordan/Desktop/jokes/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Jordan/Desktop/jokes/server/src/controllers/jokeController.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/Jordan/Desktop/jokes/server/src/controllers/jokeController.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src/controllers",
        "sourceFileName": "jokeController.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _fileService = _interopRequireDefault(require(\"../services/fileService\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar all = function all(req, res) {\n  return _fileService[\"default\"].allJokes().then(function (jokes) {\n    res.status(200);\n    res.send(jokes);\n  })[\"catch\"](function (err) {\n    res.status(400);\n    res.send(err);\n  });\n};\n\nvar add = function add(req, res) {\n  if (!req.body || !req.body.joke) {\n    res.status(400);\n    res.send(\"must have joke body\");\n    return;\n  }\n\n  var newJoke = req.body.joke;\n\n  _fileService[\"default\"].addJoke(newJoke).then(function () {\n    return res.sendStatus(200);\n  })[\"catch\"](function (err) {\n    res.status(400);\n    res.send(err);\n  });\n};\n\nvar get = function get(req, res) {\n  if (!req.query || !req.query.id) {\n    res.status(400);\n    res.send(\"must have joke id\");\n    return;\n  }\n\n  var id = req.query.id;\n\n  _fileService[\"default\"].getById(id).then(function (response) {\n    res.status(200);\n    res.send(response);\n  })[\"catch\"](function (err) {\n    res.status(400);\n    res.send(err);\n  });\n};\n\nvar remove = function remove(req, res) {\n  if (!req.query || !req.query.id) {\n    res.status(400);\n    res.send(\"must have joke id\");\n    return;\n  }\n\n  var id = req.query.id;\n\n  _fileService[\"default\"].deleteById(id).then(function () {\n    return res.sendStatus(200);\n  })[\"catch\"](function (err) {\n    res.status(400);\n    res.send(err);\n  });\n};\n\nvar update = function update(req, res) {\n  if (!req.query || !req.query.id || !req.body || !req.body.joke) {\n    res.status(400);\n    res.send(\"must have joke id and content\");\n    return;\n  }\n\n  var id = req.query.id;\n  var joke = req.body.joke;\n\n  _fileService[\"default\"].updateById({\n    id: id,\n    joke: joke\n  }).then(function () {\n    return res.sendStatus(200);\n  })[\"catch\"](function (err) {\n    res.status(400);\n    res.send(err);\n  });\n};\n\nvar _default = {\n  all: all,\n  add: add,\n  get: get,\n  remove: remove,\n  update: update\n};\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpva2VDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbImFsbCIsInJlcSIsInJlcyIsImZpbGVTZXJ2aWNlIiwiYWxsSm9rZXMiLCJ0aGVuIiwiam9rZXMiLCJzdGF0dXMiLCJzZW5kIiwiZXJyIiwiYWRkIiwiYm9keSIsImpva2UiLCJuZXdKb2tlIiwiYWRkSm9rZSIsInNlbmRTdGF0dXMiLCJnZXQiLCJxdWVyeSIsImlkIiwiZ2V0QnlJZCIsInJlc3BvbnNlIiwicmVtb3ZlIiwiZGVsZXRlQnlJZCIsInVwZGF0ZSIsInVwZGF0ZUJ5SWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBLElBQU1BLEdBQUcsR0FBRyxTQUFOQSxHQUFNLENBQUNDLEdBQUQsRUFBTUMsR0FBTjtBQUFBLFNBQ1ZDLHdCQUNHQyxRQURILEdBRUdDLElBRkgsQ0FFUSxVQUFBQyxLQUFLLEVBQUk7QUFDYkosSUFBQUEsR0FBRyxDQUFDSyxNQUFKLENBQVcsR0FBWDtBQUNBTCxJQUFBQSxHQUFHLENBQUNNLElBQUosQ0FBU0YsS0FBVDtBQUNELEdBTEgsV0FNUyxVQUFBRyxHQUFHLEVBQUk7QUFDWlAsSUFBQUEsR0FBRyxDQUFDSyxNQUFKLENBQVcsR0FBWDtBQUNBTCxJQUFBQSxHQUFHLENBQUNNLElBQUosQ0FBU0MsR0FBVDtBQUNELEdBVEgsQ0FEVTtBQUFBLENBQVo7O0FBWUEsSUFBTUMsR0FBRyxHQUFHLFNBQU5BLEdBQU0sQ0FBQ1QsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDeEIsTUFBSSxDQUFDRCxHQUFHLENBQUNVLElBQUwsSUFBYSxDQUFDVixHQUFHLENBQUNVLElBQUosQ0FBU0MsSUFBM0IsRUFBaUM7QUFDL0JWLElBQUFBLEdBQUcsQ0FBQ0ssTUFBSixDQUFXLEdBQVg7QUFDQUwsSUFBQUEsR0FBRyxDQUFDTSxJQUFKLENBQVMscUJBQVQ7QUFDQTtBQUNEOztBQUx1QixNQU1WSyxPQU5VLEdBTUVaLEdBQUcsQ0FBQ1UsSUFOTixDQU1oQkMsSUFOZ0I7O0FB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QU1ILEdBQUcsQ0FBQ2EsVUFBSixDQUFlLEdBQWYsQ0FBTjtBQUFBLEdBRlIsV0FHUyxVQUFBTixHQUFHLEVBQUk7QUFDWlAsSUFBQUEsR0FBRyxDQUFDSyxNQUFKLENBQVcsR0FBWDtBQUNBTCxJQUFBQSxHQUFHLENBQUNNLElBQUosQ0FBU0MsR0FBVDtBQUNELEdBTkg7QUFPRCxDQWhCRDs7ZUFrQmU7QUFBRVQsRUFBQUEsR0FBRyxFQUFIQSxHQUFGO0FBQU9VLEVBQUFBLEdBQUcsRUFBSEEsR0FBUDtBQUFZTSxFQUFBQSxHQUFHLEVBQUhBLEdBQVo7QUFBaUJLLEVBQUFBLE1BQU0sRUFBTkEsTUFBakI7QUFBeUJFLEVBQUFBLE1BQU0sRUFBTkE7QUFBekIsQyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvSm9yZGFuL0Rlc2t0b3Avam9rZXMvc2VydmVyL3NyYy9jb250cm9sbGVycyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmaWxlU2VydmljZSBmcm9tIFwiLi4vc2VydmljZXMvZmlsZVNlcnZpY2VcIjtcblxuY29uc3QgYWxsID0gKHJlcSwgcmVzKSA9PlxuICBmaWxlU2VydmljZVxuICAgIC5hbGxKb2tlcygpXG4gICAgLnRoZW4oam9rZXMgPT4ge1xuICAgICAgcmVzLnN0YXR1cygyMDApO1xuICAgICAgcmVzLnNlbmQoam9rZXMpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICByZXMuc3RhdHVzKDQwMCk7XG4gICAgICByZXMuc2VuZChlcnIpO1xuICAgIH0pO1xuXG5jb25zdCBhZGQgPSAocmVxLCByZXMpID0+IHtcbiAgaWYgKCFyZXEuYm9keSB8fCAhcmVxLmJvZHkuam9rZSkge1xuICAgIHJlcy5zdGF0dXMoNDAwKTtcbiAgICByZXMuc2VuZChcIm11c3QgaGF2ZSBqb2tlIGJvZHlcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHsgam9rZTogbmV3Sm9rZSB9ID0gcmVxLmJvZHk7XG4gIGZpbGVTZXJ2aWNlXG4gICAgLmFkZEpva2UobmV3Sm9rZSlcbiAgICAudGhlbigoKSA9PiByZXMuc2VuZFN0YXR1cygyMDApKVxuICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgcmVzLnN0YXR1cyg0MDApO1xuICAgICAgcmVzLnNlbmQoZXJyKTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IGdldCA9IChyZXEsIHJlcykgPT4ge1xuICBpZiAoIXJlcS5xdWVyeSB8fCAhcmVxLnF1ZXJ5LmlkKSB7XG4gICAgcmVzLnN0YXR1cyg0MDApO1xuICAgIHJlcy5zZW5kKFwibXVzdCBoYXZlIGpva2UgaWRcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHsgaWQgfSA9IHJlcS5xdWVyeTtcbiAgZmlsZVNlcnZpY2VcbiAgICAuZ2V0QnlJZChpZClcbiAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICByZXMuc3RhdHVzKDIwMCk7XG4gICAgICByZXMuc2VuZChyZXNwb25zZSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKTtcbiAgICAgIHJlcy5zZW5kKGVycik7XG4gICAgfSk7XG59O1xuXG5jb25zdCByZW1vdmUgPSAocmVxLCByZXMpID0+IHtcbiAgaWYgKCFyZXEucXVlcnkgfHwgIXJlcS5xdWVyeS5pZCkge1xuICAgIHJlcy5zdGF0dXMoNDAwKTtcbiAgICByZXMuc2VuZChcIm11c3QgaGF2ZSBqb2tlIGlkXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7IGlkIH0gPSByZXEucXVlcnk7XG4gIGZpbGVTZXJ2aWNlXG4gICAgLmRlbGV0ZUJ5SWQoaWQpXG4gICAgLnRoZW4oKCkgPT4gcmVzLnNlbmRTdGF0dXMoMjAwKSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKTtcbiAgICAgIHJlcy5zZW5kKGVycik7XG4gICAgfSk7XG59O1xuXG5jb25zdCB1cGRhdGUgPSAocmVxLCByZXMpID0+IHtcbiAgaWYgKCFyZXEucXVlcnkgfHwgIXJlcS5xdWVyeS5pZCB8fCAoIXJlcS5ib2R5IHx8ICFyZXEuYm9keS5qb2tlKSkge1xuICAgIHJlcy5zdGF0dXMoNDAwKTtcbiAgICByZXMuc2VuZChcIm11c3QgaGF2ZSBqb2tlIGlkIGFuZCBjb250ZW50XCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7IGlkIH0gPSByZXEucXVlcnk7XG4gIGNvbnN0IHsgam9rZSB9ID0gcmVxLmJvZHk7XG5cbiAgZmlsZVNlcnZpY2VcbiAgICAudXBkYXRlQnlJZCh7IGlkLCBqb2tlIH0pXG4gICAgLnRoZW4oKCkgPT4gcmVzLnNlbmRTdGF0dXMoMjAwKSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKTtcbiAgICAgIHJlcy5zZW5kKGVycik7XG4gICAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7IGFsbCwgYWRkLCBnZXQsIHJlbW92ZSwgdXBkYXRlIH07XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "jokeController.js"
      ],
      "names": [
        "all",
        "req",
        "res",
        "fileService",
        "allJokes",
        "then",
        "jokes",
        "status",
        "send",
        "err",
        "add",
        "body",
        "joke",
        "newJoke",
        "addJoke",
        "sendStatus",
        "get",
        "query",
        "id",
        "getById",
        "response",
        "remove",
        "deleteById",
        "update",
        "updateById"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/Jordan/Desktop/jokes/server/src/controllers",
      "sourcesContent": [
        "import fileService from \"../services/fileService\";\n\nconst all = (req, res) =>\n  fileService\n    .allJokes()\n    .then(jokes => {\n      res.status(200);\n      res.send(jokes);\n    })\n    .catch(err => {\n      res.status(400);\n      res.send(err);\n    });\n\nconst add = (req, res) => {\n  if (!req.body || !req.body.joke) {\n    res.status(400);\n    res.send(\"must have joke body\");\n    return;\n  }\n  const { joke: newJoke } = req.body;\n  fileService\n    .addJoke(newJoke)\n    .then(() => res.sendStatus(200))\n    .catch(err => {\n      res.status(400);\n      res.send(err);\n    });\n};\n\nconst get = (req, res) => {\n  if (!req.query || !req.query.id) {\n    res.status(400);\n    res.send(\"must have joke id\");\n    return;\n  }\n  const { id } = req.query;\n  fileService\n    .getById(id)\n    .then(response => {\n      res.status(200);\n      res.send(response);\n    })\n    .catch(err => {\n      res.status(400);\n      res.send(err);\n    });\n};\n\nconst remove = (req, res) => {\n  if (!req.query || !req.query.id) {\n    res.status(400);\n    res.send(\"must have joke id\");\n    return;\n  }\n  const { id } = req.query;\n  fileService\n    .deleteById(id)\n    .then(() => res.sendStatus(200))\n    .catch(err => {\n      res.status(400);\n      res.send(err);\n    });\n};\n\nconst update = (req, res) => {\n  if (!req.query || !req.query.id || (!req.body || !req.body.joke)) {\n    res.status(400);\n    res.send(\"must have joke id and content\");\n    return;\n  }\n  const { id } = req.query;\n  const { joke } = req.body;\n\n  fileService\n    .updateById({ id, joke })\n    .then(() => res.sendStatus(200))\n    .catch(err => {\n      res.status(400);\n      res.send(err);\n    });\n};\n\nexport default { all, add, get, remove, update };\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1555120611000
  }
}